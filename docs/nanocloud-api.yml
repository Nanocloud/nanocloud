---
swagger: '2.0'
info:
  version: "2.1.0"
  title: Nanocloud API
  description: |
    **Complete Nanocloud API documentation.**

    You can try all HTTP operation described in this Swagger spec.
host: enterprise-qa.nanocloud.com
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /configs:
    get:
      tags:
        - config
      summary:
        Get all configuration variables
      parameters:
        - in: query
          name: key
          description: Configuration keys you want to fetch (coma separated values)
          required: true
          type: string
      responses:
        200:
          description: Get specified configuration objects
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Configuration"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
        500:
          description: Internal server error when query key is invalid
    post:
      tags:
        - config
      summary:
        Set a configuration variable
      parameters:
        - in: body
          name: body
          description: Give name and value to register to configurator
          required: true
          schema:
            $ref: "#/definitions/Configuration"
      responses:
        200:
          description: Set specified configuration variable
          schema:
            type: object
            properties:
              data:
                "$ref": "#/definitions/ConfigurationWithDate"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
        500:
          description: Internal server error when a config variable is unknow

# delete should not be accessible
# Should return forbidden if you are logged in and unauthorized if you are not

# patch is not used in our configuration, post acts like patch.
# Should return forbidden if you are logged in and unauthorized if you are not


  /users:
    get:
      tags:
        - users
      summary:
        Get all users informations
      parameters:
        - in: query
          name: me
          type: boolean
          required: false
      responses:
        200:
          description: As an admin, get all users or current user if "me" parameter is provided.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/User"
        401:
          description: Unauthorized when you are not logged in.
        403:
          description: Forbidden, if you are a regular user, you don't have permissions
    post:
      tags:
        - users
      summary:
        Create a user account.
        If connected as an administrator the user is directly created as standard user.
        If you aren't connected, API create a pending account and send a mail to activate him (auto-registration must be enabled)
      parameters:
        - in: body
          name: body
          required: true
          description: Data to send for create a user, email is required
          schema:
            $ref: "#/definitions/UserCreate"
      responses:
        201:
          description: If you are admin, create a user account
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/User"
        400:
          description: Can't decode JSON payload or JSON in wrong format
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
        403:
          description: Forbidden, if you are a regular user, you don't have permissions
        401:
          description: Unauthorized when you are not logged in
  /users/{id}:
    get:
      tags:
        - users
      summary:
        Get detailed information about specified user
      parameters:
        - in: path
          name: id
          description: Return current user's data
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Get the detailed information about specified user
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/User"
        403:
          description: Forbidden, regular users can't access other user informations
        401:
          description: Unauthorized when you are not logged in
    patch:
      tags:
        - users
      summary:
        Modify user's detailed informations
      parameters:
        - in: path
          name: id
          description: Modify the user associated to this id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Modify the detailed informations
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/User"
        403:
          description: Forbidden, regular users can't modify other user informations
        401:
          description: Unauthorized when you are not logged in

    delete:
      tags:
        - users
      summary:
        Delete specified users
      parameters:
        - in: path
          name: id
          description: TODO
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Delete the specified users
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/User"
        403:
          description: Forbidden, regular users can't delete other user
        401:
          description: Unauthorized when you are not logged in
  /apps:
    get:
      tags:
        - applications
      summary:
        Get all applications if you are an admin, and accessible application for regular users
      responses:
        200:
          description: Get applications
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Application"
        401:
          description: Unauthorized when you are not logged in
    post:
      tags:
        - applications
      summary:
        Save an application
      responses:
        200:
          description: Return the created app
          schema:
            type: object
            properties:
              data:
                "$ref": "#/definitions/ApplicationCreated"
        403:
          description: If you do not have the permission to save an application
        401:
          description: Unauthorized
  /apps/{app_id}:
    get:
      tags:
        - applications
      summary:
        Get a specific application details
      parameters:
        - in: path
          name: app_id
          description: Application UUID
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Return specified application
          schema:
            type: object
            properties:
              data:
                "$ref": "#/definitions/ApplicationCreated"
        403:
          description: Don't have the permission to see this application
        401:
          description: Unauthorized when you are not logged in
    patch:
      tags:
        - applications
      summary:
        Modify a specific application details
      parameters:
        - in: path
          name: app_id
          description: Update the application's informations
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Modify the specified application
          schema:
            type: object
            properties:
              data:
                "$ref": "#/definitions/ApplicationCreated"
        403:
          description: Don't have the permission to update this application
        401:
          description: Unauthorized when you are not logged in
    delete:
      tags:
        - applications
      summary:
        Delete specified application
      parameters:
        - in: path
          name: app_id
          description: TODO
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Delete the specified application
        403:
          description: Don't have the permission to delete this application
        401:
          description: Unauthorized when you are not logged in
  /apps/connections:
    get:
      tags:
        - applications
        - connections
      summary:
        Get all connections. Connections are object that link an application to
        a machine.
      responses:
        200:
          description: Returns connections
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Connections"
        401:
          description: Unauthorized when you are not logged in
  /sessions:
    get:
      tags:
        - sessions
      summary:
        List all sessions. Those sessions indicate which users are connected to
        which VM
      responses:
        200:
          description: Get connected sessions
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Session"
        401:
          description: Unauthorized
        403:
          description: Forbidden, accessible to admin only
        500:
          description: When listing machines failed
    delete:
      tags:
        - sessions
      summary:
        Disconnect logged on user from specified sessions (and machines)
      responses:
        200:
          description: Session has correctly been disconnected
        401:
          description: Unauthorized
        500:
          description: Something went terribly wrong

  /histories:
    get:
      tags:
        - histories
      summary:
        Get all histories entries
      responses:
        200:
          description: Get histories entries
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Histories"
    post:
      tags:
        - histories
      summary:
        Save a new history entry
      responses:
        201:
          description: Saved histories entries
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Histories"
        400:
          description: Bad resquest, machineId or endDate is invalid
  /reset-password-tokens:
    post:
      tags:
        - users
        - password
      summary:
        Create a reset password id for the future reset
      parameters:
        - in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/Reset-password-token"
      responses:
        200:
          description: User added to the reset-password table
        404:
          description: User not found
        500:
          description: Internal server error, probably bad smtp server configuration
    get:
      tags:
        - users
        - password
      summary:
        Return all requests of reset-password
      responses:
        200:
          description: Return all requests
        403:
          description: Forbidden, only admin can list all requests
        401:
          description: Unauthorized when you are not logged in
  /reset-password-tokens/{id}:
    get:
      tags:
        - users
        - password
      summary:
        Get user's reset-password request's id
      parameters:
        - in: path
          name: id
          description: Reset-password request's id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Return user's reset-password informations
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Reset-password-token"
        404:
          description: No reset-password requests have been found for this user.
    patch:
      tags:
        - users
        - password
      summary:
        Reset password tokens for specified user
      parameters:
        - in: path
          name: id
          description: Reset-password request's id
          required: true
          type: string
          format: uuid
        - in: body
          name: data
          description: New password
          required: true
          schema:
            $ref: "#/definitions/Reset-password-token"
      responses:
        200:
          description: Reset password
        404:
          description: No irequest of reseting with this email/id
    delete:
      tags:
        - users
        - password
      summary:
        Delete a request of reset-password
      parameters:
        - in: path
          name: id
          description: Reset-password request's id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Delete the request
        404:
          description: No request found
        401:
          description: Unauthorized when you are not logged in
        403:
          description: Forbidden, only admin can delete a request
  /machines:
    get:
      tags:
        - machines
      summary:
        Get all machines
      responses:
        200:
          description: Machine running for the user (all machines for admins)
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Machines"
        401:
          description: Unauthorized when you are not logged in
    post:
      tags:
        - machines
      summary:
        Create a new machine
      responses:
        403:
          description: Forbidden, no users are allowed to create machines
  /machines/users:
    get:
      tags:
        - machines
        - users
      summary:
        Get all machines for users
      responses:
        200:
          description: Return all machines for a user
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Machines"
        401:
          description: Unauthorized if no token without an access token
  /machines/{id}:
    get:
      tags:
        - machines
      summary:
        Get detailed information for specified machine
      parameters:
        - in: path
          name: id
          description: TODO
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Return the specified machine information
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Machines"
        403:
          description: Forbidden for regular users trying to access machines not assigned to them.
    patch:
      tags:
        - machines
      summary:
        Modify a specific machine details
      parameters:
        - in: path
          name: id
          description: TODO
          required: true
          type: string
          format: uuid
        - in: body
          name: data
          description: machine with attribute status set to 'rebooting', 'stopping' or 'starting'
          required: true
          schema:
            $ref: "#/definitions/Machines"
      responses:
        200:
          description: Only for rebooting machines
        401:
          description: Unauthorized if no token without an access token.
        403:
          description: Forbidden, no users are allowed to modify machines properties
    delete:
      tags:
        - machines
      summary:
        Delete and terminate specified machines
      parameters:
        - in: path
          name: id
          description: TODO
          required: true
          type: string
          format: uuid
      responses:
        403:
          description: Forbidden, no users are allowed to delete machines
  /:
    get:
      summary:
        Get static files
      responses:
        200:
          description: Will get configurations
  /tokens:
    get:
      tags:
        - auth
      summary:
        Ask API for a token (oauth2 protocol)
      responses:
        200:
          description: Return a token
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/AccessToken"
  /tokens/{id}:
    delete:
      tags:
        - auth
      summary:
        Delete specified token. User associated to this token is disconnected
        from Nanocloud
      parameters:
        - in: path
          name: id
          description: TODO
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Token has been deleted
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/AccessToken"
  /groups:
    get:
      tags:
        - users
        - groups
      summary:
        Get all groups
      responses:
        200:
          description: Get all groups
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Groups"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
    post:
      tags:
        - users
        - groups
      summary:
        Create a new group
      parameters:
        - in: body
          name: data
          description: Groups description
          required: true
          schema:
              $ref: "#/definitions/GroupsReqPost"
      responses:
        201:
          description: Group created
          schema:
            type: object
            properties:
              data:
                "$ref": "#/definitions/Groups"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
  /groups/{group_id}:
    get:
      tags:
        - users
        - groups
      summary:
        Get detailed information of a group
      parameters:
        - in: path
          name: group_id
          description: Id of the group to fetch
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Get group details
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/GroupsWithRelationships"
              included:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: "#/definitions/User"
                    - $ref: "#/definitions/Application"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
    patch:
      tags:
        - users
        - groups
      summary:
        Modify a specific group details
      parameters:
        - in: body
          name: data
          description: Group description
          required: true
          schema:
            $ref: "#/definitions/GroupsReqPatch"
        - in: path
          name: group_id
          description: Id of the group
          required: true
          type: string
      responses:
        200:
          description: Modify the group name
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/GroupsWithRelationships"
              included:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: "#/definitions/User"
                    - $ref: "#/definitions/Application"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
    delete:
      tags:
        - users
        - groups
      summary:
        Delete specified group
      parameters:
        - in: path
          name: group_id
          description: Id of the group to delete
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Group have been deleted
          schema:
            type: object
            properties:
              meta:
                type: object
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /teams:
    get:
      tags:
        - users
        - teams
      summary:
        Get all teams
      responses:
        200:
          description: Get all teams
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Teams"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
        401:
          description: Unauthorized when you are not logged in
    post:
      tags:
        - users
        - teams
      summary:
        Create a new team
      parameters:
        - in: body
          name: data
          description: Teams description
          required: true
          schema:
            $ref: "#/definitions/Teams"
      responses:
        200:
          description: Team created
        400:
          description: You already belong to a team
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
        401:
          description: Unauthorized when you are not logged in
  /teams/{team_id}:
    get:
      tags:
        - users
        - teams
      summary:
        Get detailed information variables
      parameters:
        - in: path
          name: team_id
          description: Id of the team to fetch
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Get team details
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Teams"
              included:
                type: array
                items:
                  "$ref": "#/definitions/User"
        403:
          description: You are not an admin or not the team member for the team we are trying to fetch
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
        401:
          description: Unauthorized when you are not logged in

  /files?path={path}:
    get:
      tags:
        - files
      summary:
        Get the files list in user storage
      parameters:
        - in: path
          name: path
          description: Path to browse (default root directory)
          required: true
          type: string
          format: string
      responses:
        200:
          description: Return the files list
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Files"
              meta:
                type: object
                properties:
                  storageSize:
                    type: string
        401:
          description: Unauthorized when you are not logged in
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /files?machines=true&path={path}:
    get:
      tags:
        - files
      summary:
        Get the files list from virtual machine
      parameters:
        - in: path
          name: path
          description: Path to browse (default root directory)
          required: true
          type: string
          format: string
      responses:
        200:
          description: Return the files list
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Files"
        401:
          description: Unauthorized when you are not logged in
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /files?teams=true&path={path}:
    get:
      tags:
        - files
      summary:
        Get the files list from virtual machine
      parameters:
        - in: path
          name: path
          description: Path to browse (default root directory)
          required: true
          type: string
          format: string
      responses:
        200:
          description: Return the files list
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/Files"
        401:
          description: Unauthorized when you are not logged in
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /files/token{filename}:
    get:
      tags:
        - files
      summary:
        Get all configuration variables
      parameters:
        - in: path
          name: filename
          description: Name of the file
          required: true
          type: string
          format: string
      responses:
        200:
          description: Return a one hour download token valid for the specific file
          schema:
            type: string
            properties:
              token:
                type: string

  /files/download{filename}{token}:
    get:
      tags:
        - files
      summary:
        Download a file
      parameters:
        - in: path
          name: filename
          description: Name of file to download
          required: true
          type: string
          format: string
        - in: path
          name: token
          description: A valid download token
          required: true
          type: string
          format: string
      responses:
        200:
          description: File successfully downloaded
        403:
          description: Download is forbidden
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /upload?{filename}:
    post:
      tags:
        - files
      summary:
        Upload a file in personal storage
      parameters:
        - in: path
          name: filename
          description: file name
          required: true
          type: string
          format: string
      responses:
        200:
          description: File have been uploaded
        400:
          description: Bad request, no file was uploaded
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /upload?taget=teams&filename={filename}:
    post:
      tags:
        - files
      summary:
        Upload a file in the team directory
      parameters:
        - in: path
          name: filename
          description: file name
          required: true
          type: string
          format: string
      responses:
        200:
          description: File have been uploaded
        400:
          description: Bad request, no file was uploaded
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /files?filename={filename}:
    post:
      tags:
        - files
      summary:
        Create a directory in personal storage
      parameters:
        - in: path
          name: filename
          description: file name
          required: true
          type: string
          format: string
      responses:
        200:
          description: Directory have been created
        400:
          description: Bad request, no directory was created
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
    delete:
      tags:
        - files
      summary:
        Remove a file or a directory from personal storage. In case of a directory, all its content is recursively removed
      parameters:
        - in: path
          name: filename
          description: file name
          required: true
          type: string
          format: string
      responses:
        200:
          description: Files or directories have been removed
        400:
          description: Bad request, no operations were applied
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /files?target=teams&filename={filename}:
    post:
      tags:
        - files
      summary:
        Create a directory in team storage
      parameters:
        - in: path
          name: filename
          description: file name
          required: true
          type: string
          format: string
      responses:
        200:
          description: Directory have been created
        400:
          description: Bad request, no directory was created
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
    delete:
      tags:
        - files
      summary:
        Remove a file or a directory from team storage. In case of a directory, all its content is recursively removed
      parameters:
        - in: path
          name: filename
          description: file name
          required: true
          type: string
          format: string
      responses:
        200:
          description: Files or directories have been removed
        400:
          description: Bad request, no operations were applied
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /files?filename={filename}&newfilename={newfilename}:
    patch:
      tags:
        - files
      summary:
        Rename/move a file or a directory
      parameters:
        - in: path
          name: filename
          description: current file name
          required: true
          type: string
          format: string
        - in: path
          name: newfilename
          description: new file name
          required: true
          type: string
          format: string
      responses:
        200:
          description: File or directory renamed
        400:
          description: Bad request, no operations were applied
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /files?teams=true&filename={filename}&newfilename={newfilename}:
    patch:
      tags:
        - files
      summary:
        Rename/move a file or a directory
      parameters:
        - in: path
          name: filename
          description: current file name
          required: true
          type: string
          format: string
        - in: path
          name: newfilename
          description: new file name
          required: true
          type: string
          format: string
      responses:
        200:
          description: File or directory renamed
        400:
          description: Bad request, no operation were applied
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /pendingusers:
    post:
      tags:
        - pendingusers
        - users
      summary:
        Create a pending user
      parameters:
        - in: body
          name: data
          description: Pending user description
          required: true
          schema:
            $ref: "#/definitions/PendingusersReq"
      responses:
        201:
          description: Pending user successfully created
          schema:
            $ref: "#/definitions/PendingusersRes"
        400:
          description: Bad request
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: "#/definitions/Errors"
    get:
      tags:
        - pendingusers
        - users
      summary:
        Get the list of pending users
      responses:
        200:
          description: List of all pendiing users
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  "$ref": "#/definitions/PendingusersRes"
        401:
          description: You are not authorized
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
  /pendingusers/{PendingUserId}:
    get:
      tags:
        - pendingusers
        - users
      summary:
        Find one pending user
      parameters:
        - in: path
          name : PendingUserId
          description: Pending user id to activate
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Information about one specific pending user
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/PendingusersRes"
        401:
          description: You are not authorized
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
    patch:
      tags:
        - pendingusers
        - users
      summary:
        Activate a pending user
      parameters:
        - in: path
          name : PendingUserId
          description: Pending user id to activate
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Pending user successfully activated
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/PendingusersRes"
        404:
          description: This pending user was not found
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"

  /images:
    post:
      tags:
        - images
      summary:
        Create an image
      responses:
        201:
          description: Image successfully created
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Images"
        401:
          description: You are not authorized
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
    get:
      tags:
        - images
      summary:
        Get all images
      responses:
        200:
          description: List of all images
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Images"
        401:
          description: You are not authorized
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
  /images/{ImageId}:
    get:
      tags:
        - images
      summary:
        Get a specific image
      parameters:
        - in: path
          name : ImageId
          description: Image id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Information about the specific image
          schema:
            type: object
            properties:
              data:
                  $ref: "#/definitions/Images"
        401:
          description: You are not authorized
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
    patch:
      tags:
        - images
      summary:
        Modify a specific image
      parameters:
        - in: path
          name : ImageId
          description: Image id
          required: true
          type: string
          format: uuid
        - in: body
          name: body
          required: true
          description: Data to apply to specified image
          schema:
            $ref: "#/definitions/Images"
      responses:
        200:
          description: Information about the specific image
          schema:
            type: object
            properties:
              data:
                  $ref: "#/definitions/Images"
        401:
          description: You are not authorized
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  "$ref": "#/definitions/Errors"
        403:
          description: You are not allowed to modify images
          schema:
            type: string

  /properties:
    get:
      tags:
        - properties
      summary:
        Get all properties
      responses:
        200:
          description: List of properties
          schema:
            $ref: "#/definitions/Properties"

  /oauth/token:
    get:
      tags:
        - oauth
      summary:
        Return a token from a valid username/password
      parameters:
        - in: body
          name: data
          description: Login credentials
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        400:
          description: Your credentials are not valid or your account expired
          schema:
            $ref: "#/definitions/LoginErrors"

  /brokerlog:
    get:
      tags:
        - brokerlog
      summary:
        Return all logs of the broker
      responses:
        200:
          description: List all broker logs
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/BrokerLog"
        403:
          description: Only admin can list broker logs

  /templates:
    get:
      tags:
        - templates
      summary:
        Get a detailed list of templates
      responses:
        200:
          description: Get all templates
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Templates"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: "#/definitions/Errors"

  /templates/{template_id}:
    get:
      tags:
        - templates
      summary:
        Get details of a specific template
      parameters:
        - in: path
          name: template_id
          description: Id of the template to fetch
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Get template details
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/Templates"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: "#/definitions/Errors"

    patch:
      tags:
        - templates
      summary:
        Update a specific template
      parameters:
        - in: path
          name: template_id
          description: Id of the template to update
          required: true
          type: string
          format: uuid
        - in: body
          name: data
          description: Template description
          required: true
          schema:
            $ref: "#/definitions/TemplatesAttibutes"
      responses:
        200:
          description: The template details updated
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/Templates"
        403:
          description: You are not an admin
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: "#/definitions/Errors"

definitions:
  Configuration:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          key:
            type: string
          value:
            type: string

  ConfigurationWithDate:
     type: object
     properties:
       type:
         type: string
       id:
         type: string
       attributes:
          type: object
          properties:
            value:
              type: string
            created-at:
              type: string
              format: date-time
            updated-at:
              type: string
              format: date-time

  Reset-password-token:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: object
        properties:
          email:
            type: string
          password:
            type: string

  Errors:
    type: object
    properties:
      code:
        type: string
      title:
        type: string

  User:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          credit:
            type: string
          first-name:
            type: string
          last-name:
            type: string
          email:
            type: string
          is-admin:
            type: boolean
          expiration-date:
            type: number
            format: integer
          created-at:
            type: string
          updated-at:
            type: string

  UserCreate:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: object
        properties:
          credit:
            type: string
          first-name:
            type: string
          last-name:
            type: string
          email:
            type: string
          password:
            type: string
          is-admin:
            type: boolean
          expiration-date:
            type: number
            format: integer

  Application:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          alias:
            type: string
          display-name:
            type: string
          file-path:
            type: string

  ApplicationCreated:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          alias:
            type: string
          display-name:
            type: string
          file-path:
            type: string
          state:
            type: string
          created-at:
            type: string
            format: date-time
          updated-at:
            type: string
            format: date-time

  Session:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          username:
            type: string
          state:
            type: string
          user-id:
            type: string

  Histories:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          user-id:
            type: string
          user-mail:
            type: string
          user-firstname:
            type: string
          user-lastname:
            type: string
          connection-id:
            type: string
          start-date:
            type: string
          end-date:
            type: string
          machineId:
            type: string
          machineDriver:
            type: string
          machineType:
            type: string

  Machines:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          name:
            type: string
          type:
            type: string
          ip:
            type: string
          username:
            type: string
          password:
            type: string
          domain:
            type: string
          end-date:
            type: string
          plazaport:
            type: string
          flavor:
            type: string
          user:
            type: string
          status:
            type: string

  AccessToken:
    type: object
    properties:
      Token:
        type: string
      Type:
        type: string
      ExpiresIn:
        type: string

  Groups:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          name:
            type: string
          id:
            type: string
            format: uuid
          created-at:
            type: string
            format: date-time
          updated-at:
            type: string
            format: date-time

  GroupsReqPost:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: object
        properties:
          name:
            type: string
      relationships:
        type: object
        properties:
          apps:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
          members:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string

  GroupsReqPatch:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          name:
            type: string
      relationships:
        type: object
        properties:
          apps:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
          members:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string

  GroupsWithRelationships:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          name:
            type: string
          id:
            type: string
          created-at:
            type: string
            format: date-time
          updated-at:
            type: string
            format: date-time
      relationships:
        type: object
        properties:
          apps:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
          members:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string

  Teams:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          name:
            type: string
          id:
            type: string
      relationships:
        type: object
        properties:
          members:
            type: object
            properties:
              type:
                type: string
              id:
                type: string

  Files:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      attribtues:
        type: object
        properties:
          mod_time:
            type: number
            format: int
          name:
            type: string
          size:
            type: number
            format: int
          type:
            type: string

  Connections:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      attributes:
        type: object
        properties:
          hostname:
            type: string
          machine-id:
            type: string
          machine-type:
            type: string
          machine-driver:
            type: string
          port:
            type: string
          username:
            type: string
          password:
            type: string
          remote_app:
            type: string
          protocol:
            type: string
          app_name:
            type: string

  PendingusersReq:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: object
        properties:
          created-at:
            type: string
            format: date-time
          credit:
            type: number
          email:
            type: string
          expiration-date:
            type: string
            format: date-time
          fisrt-name:
            type: string
          last-name:
            type: string
          password:
            type: string
          is-admin:
            type: boolean
      relationships:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: "#/definitions/Groups"

  PendingusersRes:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          created-at:
            type: string
            format: date-time
          updated-at:
            type: string
            format: date-time
          email:
            type: string
          fisrt-name:
            type: string
          last-name:
            type: string
          is-admin:
            type: boolean

  Images:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          iaas-id:
            type: string
            format: uuid
          name:
            type: string
          build-from:
            type: string
          deleted:
            type: boolean
          password:
            type: string
          pool-size:
            type: number
          instancesSize:
            type: string
          created-at:
            type: string
            format: date-time
          updated-at:
            type: string
            format: date-time

  Properties:
    type: object
    properties:
      primaryColor:
        type: string
      title:
        type: string
      style:
        type: string
      favicon:
        type: string
      autoRegister:
        type: boolean

  Login:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      grant_type:
        type: string

  LoginErrors:
    type: object
    properties:
      error:
        type: string
      error_description:
        type: string
      status:
        type: number

  BrokerLog:
    type: object
    properties:
      user-id:
        type: string
      machine-id:
        type: string
      machine-driver:
        type: string
      machine-flavor:
        type: string
      state:
        type: string
      pool-size:
        type: string

  Templates:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          key:
            type: string
          content:
            type: string
          subject:
            type: string
          created-at:
            type: string
            format: date-Time
          updated-at:
            type: string
            format: date-Time

  TemplatesAttibutes:
    type: object
    properties:
      key:
        type: string
      content:
        type: string
      subject:
        type: string
      created-at:
        type: string
        format: date-Time
      updated-at:
        type: string
        format: date-Time
